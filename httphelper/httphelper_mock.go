// Code generated by MockGen. DO NOT EDIT.
// Source: httphelper.go

// Package httphelper is a generated GoMock package.
package httphelper

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockClient) Delete(request Request) *ResponseFail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", request)
	ret0, _ := ret[0].(*ResponseFail)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientMockRecorder) Delete(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), request)
}

// Get mocks base method.
func (m *MockClient) Get(request Request) *ResponseFail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", request)
	ret0, _ := ret[0].(*ResponseFail)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockClientMockRecorder) Get(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), request)
}

// Patch mocks base method.
func (m *MockClient) Patch(request Request) *ResponseFail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", request)
	ret0, _ := ret[0].(*ResponseFail)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockClientMockRecorder) Patch(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockClient)(nil).Patch), request)
}

// Post mocks base method.
func (m *MockClient) Post(request Request) *ResponseFail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", request)
	ret0, _ := ret[0].(*ResponseFail)
	return ret0
}

// Post indicates an expected call of Post.
func (mr *MockClientMockRecorder) Post(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockClient)(nil).Post), request)
}

// Put mocks base method.
func (m *MockClient) Put(request Request) *ResponseFail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", request)
	ret0, _ := ret[0].(*ResponseFail)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockClientMockRecorder) Put(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockClient)(nil).Put), request)
}

// SetAuthBasicToHeader mocks base method.
func (m *MockClient) SetAuthBasicToHeader(user, password string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAuthBasicToHeader", user, password)
}

// SetAuthBasicToHeader indicates an expected call of SetAuthBasicToHeader.
func (mr *MockClientMockRecorder) SetAuthBasicToHeader(user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthBasicToHeader", reflect.TypeOf((*MockClient)(nil).SetAuthBasicToHeader), user, password)
}
