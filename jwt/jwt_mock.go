// Code generated by MockGen. DO NOT EDIT.
// Source: jwt.go

// Package jwt is a generated GoMock package.
package jwt

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockJWT is a mock of JWT interface.
type MockJWT struct {
	ctrl     *gomock.Controller
	recorder *MockJWTMockRecorder
}

// MockJWTMockRecorder is the mock recorder for MockJWT.
type MockJWTMockRecorder struct {
	mock *MockJWT
}

// NewMockJWT creates a new mock instance.
func NewMockJWT(ctrl *gomock.Controller) *MockJWT {
	mock := &MockJWT{ctrl: ctrl}
	mock.recorder = &MockJWTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWT) EXPECT() *MockJWTMockRecorder {
	return m.recorder
}

// GetUserClaims mocks base method.
func (m *MockJWT) GetUserClaims(ctx context.Context) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserClaims", ctx)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetUserClaims indicates an expected call of GetUserClaims.
func (mr *MockJWTMockRecorder) GetUserClaims(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserClaims", reflect.TypeOf((*MockJWT)(nil).GetUserClaims), ctx)
}

// GetUserEmail mocks base method.
func (m *MockJWT) GetUserEmail(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEmail", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserEmail indicates an expected call of GetUserEmail.
func (mr *MockJWTMockRecorder) GetUserEmail(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmail", reflect.TypeOf((*MockJWT)(nil).GetUserEmail), ctx)
}

// GetUserID mocks base method.
func (m *MockJWT) GetUserID(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockJWTMockRecorder) GetUserID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockJWT)(nil).GetUserID), ctx)
}

// NewToken mocks base method.
func (m *MockJWT) NewToken(secret, issuer, subject string, duration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewToken", secret, issuer, subject, duration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewToken indicates an expected call of NewToken.
func (mr *MockJWTMockRecorder) NewToken(secret, issuer, subject, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewToken", reflect.TypeOf((*MockJWT)(nil).NewToken), secret, issuer, subject, duration)
}
