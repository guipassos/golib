// Code generated by MockGen. DO NOT EDIT.
// Source: consumer.go

// Package consumer is a generated GoMock package.
package consumer

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *MockConsumer) DeleteMessage(messageReceipt *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", messageReceipt)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockConsumerMockRecorder) DeleteMessage(messageReceipt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockConsumer)(nil).DeleteMessage), messageReceipt)
}

// Run mocks base method.
func (m *MockConsumer) Run(ctx context.Context, chResponse chan Response) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", ctx, chResponse)
}

// Run indicates an expected call of Run.
func (mr *MockConsumerMockRecorder) Run(ctx, chResponse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockConsumer)(nil).Run), ctx, chResponse)
}
