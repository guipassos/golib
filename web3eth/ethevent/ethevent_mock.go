// Code generated by MockGen. DO NOT EDIT.
// Source: ethevent.go

// Package ethevent is a generated GoMock package.
package ethevent

import (
	big "math/big"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEvent is a mock of Event interface.
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
}

// MockEventMockRecorder is the mock recorder for MockEvent.
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance.
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// SubscribingLogsBlocks mocks base method.
func (m *MockEvent) SubscribingLogsBlocks(from *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribingLogsBlocks", from)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribingLogsBlocks indicates an expected call of SubscribingLogsBlocks.
func (mr *MockEventMockRecorder) SubscribingLogsBlocks(from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribingLogsBlocks", reflect.TypeOf((*MockEvent)(nil).SubscribingLogsBlocks), from)
}
