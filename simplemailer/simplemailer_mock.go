// Code generated by MockGen. DO NOT EDIT.
// Source: simplemailer.go

// Package simplemailer is a generated GoMock package.
package simplemailer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMailer is a mock of Mailer interface.
type MockMailer struct {
	ctrl     *gomock.Controller
	recorder *MockMailerMockRecorder
}

// MockMailerMockRecorder is the mock recorder for MockMailer.
type MockMailerMockRecorder struct {
	mock *MockMailer
}

// NewMockMailer creates a new mock instance.
func NewMockMailer(ctrl *gomock.Controller) *MockMailer {
	mock := &MockMailer{ctrl: ctrl}
	mock.recorder = &MockMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailer) EXPECT() *MockMailerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMailer) Send(to []string, subject, filename string, data map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", to, subject, filename, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMailerMockRecorder) Send(to, subject, filename, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMailer)(nil).Send), to, subject, filename, data)
}

// SendAttachment mocks base method.
func (m *MockMailer) SendAttachment(to []string, subject, templateFile string, data map[string]interface{}, attachments map[string][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAttachment", to, subject, templateFile, data, attachments)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAttachment indicates an expected call of SendAttachment.
func (mr *MockMailerMockRecorder) SendAttachment(to, subject, templateFile, data, attachments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAttachment", reflect.TypeOf((*MockMailer)(nil).SendAttachment), to, subject, templateFile, data, attachments)
}

// SetTemplateSettings mocks base method.
func (m *MockMailer) SetTemplateSettings(templatePath, templateBase string, settings map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTemplateSettings", templatePath, templateBase, settings)
}

// SetTemplateSettings indicates an expected call of SetTemplateSettings.
func (mr *MockMailerMockRecorder) SetTemplateSettings(templatePath, templateBase, settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTemplateSettings", reflect.TypeOf((*MockMailer)(nil).SetTemplateSettings), templatePath, templateBase, settings)
}

// Validate mocks base method.
func (m *MockMailer) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockMailerMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockMailer)(nil).Validate))
}
